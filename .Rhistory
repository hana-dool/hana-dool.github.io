n_distinct(ls) # sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
group_by(sex,age) %>%
mutate(l_diversity = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
group_by(sex,age) %>%
mutate(l_diversity = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
group_by(sex,age) %>%
summarise(l_diversiy = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
#-------------------------- Advanced working--------------------#
# group by 로 두개 변수의 combination 에 대해서 각 value 들의 count
diamonds %>%
group_by(cut,color) %>%
summarise(count = n())
# 이렇게 해도 위와 같다.
diamonds %>%
count(cut,color)
# group by 로 두개 변수의 combination에 대해서,
diamonds
# group by 로 두개 변수의 combination에 대해서, unique 한 clarity 의 count
diamonds %>%
group_by(cut ,color) %>%
summarise(count = n_distinct(clarity))
data %>%
group_by(sex,age) %>%
summarise(l_diversiy = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data
data %>%
group_by(sex,age) %>%
summarise(l_diversiy = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
l_div= data %>%
group_by(sex,age) %>%
summarise(l_diversiy = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
l_div
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
group_by(sex ,age) %>%
summarise(count = n())
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=MALE & age>88)
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex==MALE & age>88)
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=='MALE' & age>88)
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=='MALE' & age>88)
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
# 88 세 이상의 남자 고령
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=='MALE' & age>88)
# 88 세 이상의 남자 고령
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=='MALE' & age>87)
# 89 세 이상의 남자 고령
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=='MALE' & age>88)
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
# 89 세 이상의 남자 고령
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=='MALE' & age>88)
# 89 세 이상의 남자 고령은 모두 l_diversity 가 1
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=='MALE' & age>88)
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
# 89 세 이상의 남자 고령은 모두 l_diversity 가 1
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(age>88)
sex=='MALE'
# 89 세 이상의 남자 고령은 모두 l_diversity 가 1
data %>%
group_by(sex ,age) %>%
summarise(count = n()) %>%
filter(sex=='MALE' & age>88)
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
filter(sex=='MALE' & age>88)
# ----------------- 3번 -----------------------------------------#
?syn
sds_3 = syn(ods,m=10,seed=0514)
sds_3 = syn(ods,m=10,seed=0514,printFlag=F)
sds_3 = syn(ods,m=10,seed=0514)
sds_3
compare(sds_3, ods, stat = "counts")
compare(sds,ods)
compare(sds.default,ods,stat='counts')
compare(sds_3, ods, stat = "counts")
compare(sds.default,ods,stat='counts')
multi.compare(sds_3,ods)
multi.compare(sds_3,ods,var='sex')
sds_3
var(sds_3[,c('age','income')])
sds.3 = syn(ods,m=10,seed=0514)
compare(sds.3, ods, stat = "counts")
compare(sds.3, ods, stat = "counts")
sds.3 = syn(ods,m=20,seed=2014131026)
compare(sds.3, ods, stat = "counts")
compare(sds.default,ods,stat='counts')
var(sds.3$syn[,c('age','income')])
var(sds.3$syn[,c('age','income')])
sds.3$syn
sds.3$syn
# m = 20 으로 늘린 모델
sds.3 = syn(ods,m=5,seed=2014131026)
compare(sds.3, ods, stat = "counts")
compare(sds.default,ods,stat='counts')
ods
sds.4 = syn(ods,m=5,seed=2014131026,method = 'parametric')
sds.4 = syn(ods,seed=2014131026,method = 'parametric')
sds.4
compare(sds.4, ods, stat = "counts")
,data = sds.4, family = "binomial")
glm2 <- glm.synds(marital ~ sex + age + income + ls
,data = sds.4, family = "binomial")
compare(glm2,ods)
compare(glm1,ods)
glm2 <- glm.synds(marital ~ sex + age + income + ls
,data = sds.4, family = "binomial")
compare(glm2,ods)
compare(glm1,ods)
glm2 <- glm.synds(marital ~ sex + age + income + ls
,data = sds.3, family = "binomial")
compare(glm2,ods)
compare(glm1,ods)
glm2 <- glm.synds(marital ~ sex + age + income + ls
,data = sds.4, family = "binomial")
compare(glm2,ods)
compare(glm1,ods)
?syn
var(sds[,c('age','income')])
var(sds.4$syn[,c('age','income')])
var(ods[,c('age','income')])
var(sds.4$syn[,c('age','income')])
var(ods[,c('age','income')])
var(sds[,c('age','income')])
var(sds.4$syn[,c('age','income')])
var(ods[,c('age','income')])
var(sds[,c('age','income')])
var(sds.4$syn[,c('age','income')])
var(ods[,c('age','income')])
# 아 제엔장 covariance 구조 박살낫네
var(sds[,c('age','income')])
var(ods[,c('age','income')])
var(sds.4$syn[,c('age','income')])
var(ods[,c('age','income')])
# 아 제엔장 covariance 구조 박살낫네
var(sds[,c('age','income')])
# 아 제엔장 covariance 구조 박살낫네
var(ods[,c('age','income')])
var(sds[,c('age','income')])
var(sds.4$syn[,c('age','income')])
# 오 parametric 으로 시행하니 그 값들이 매우 좋아졌다. (특히 income)
sds.4 = syn(ods,seed=2014131026,method = 'parametric')
compare(sds.4, ods, stat = "counts")
sds.4
sds
sds.3
# 오 parametric 으로 시행하니 그 값들이 매우 좋아졌다. (특히 income)
sds.4 = syn(ods,seed=2014131026,method = c(  "cart" ,"cart" , "cart" ,"normrank", "cart" ))
compare(sds.4, ods, stat = "counts")
sds.4
?syn
var(sds.4$syn[,c('age','income')])
# 아 제엔장 covariance 구조 박살낫네
var(ods[,c('age','income')])
var(sds[,c('age','income')])
var(sds.4$syn[,c('age','income')])
var(sds.4$syn[,c('age','income')])
# 오 parametric 으로 시행하니 그 값들이 매우 좋아졌다. (특히 income)
sds.4 = syn(ods,seed=2014131026,method = c( 'parametric'))
compare(sds.4, ods, stat = "counts")
,data = sds.4, family = "binomial")
glm2 <- glm.synds(marital ~ sex + age + income + ls
,data = sds.4, family = "binomial")
compare(glm2,ods)
compare(glm1,ods)
compare(glm2,ods)
compare(glm1,ods)
compare(glm2,ods)
compare(glm1,ods)
compare(glm1,ods)
compare(glm2,ods)
compare(glm1,ods)
# 아 제엔장 covariance 구조 박살낫네
var(ods[,c('age','income')])
var(sds[,c('age','income')])
var(sds.4$syn[,c('age','income')])
compare(sds.4, ods, stat = "counts")
# m = 5 로 늘린 모델. 어느정도 더 좋아진듯 하다.
sds.3 = syn(ods,m=5,seed=2014131026)
compare(sds.3, ods, stat = "counts")
compare(sds.default,ods,stat='counts')
k <- c('A','A','B','B','B','C')
G <- c(1,1,1,1,2,3)
data.frame(K,G)
data.frame(k,G)
p<-data.frame(k,G)
library(dplyr)
p.
p %>%
add_count(k,G,name=add)
p %>%
add_count(k,G,name=add)
p = add_count(p,k,G,name=add)
library(dplyr)
p = add_count(p,k,G,name=add)
add_count(p,k,G)
p = add_count(p,k,G)
p
# install.packages("synthpop")
set.seed(2014131026)
#------------------------ data generating -------------------------------#
require(synthpop)
vars=c("sex", "age", "marital", "income", "ls")
SD2011_sub=SD2011[, vars]
ods=SD2011_sub[which(SD2011_sub$income>0),]
sds.default=syn(ods,seed=2014131026)
sds=sds.default$syn
sds
############################## 1번 ###########################################
#1.1 compute k-anonymity and l-diversity
library(dplyr)
data = add_count(sds,sex,age,name='k_anonymity') # sex 와 age 를 key variable 로 삼아서 k-anonymity 계산
data=data %>%
group_by(sex,age) %>% #sex 와 age 를 묶음
mutate(l_diversity = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, l-diversity 계산
data
#1.2 sort syntheic data in order of sex, age, ls
data = data %>%
arrange(sex,age,ls)
data # factor 에서, 순서별로 되어있던 정렬
data_alphabet = data.frame(data)
data_alphabet$sex = as.character(data_alphabet$sex)
data_alphabet$ls = as.character(data_alphabet$ls)
data_alphabet = data_alphabet %>%
arrange(sex,age,ls)
#1.3 Report 첫 20개의 데이터 (알파벳순 정렬)
head(data_alphabet,20)
############################ 2번 #####################################
#-------------------2번 데이터 privacy-------------------------#
data %>%
arrange(l_diversity)
# 89 세 남자 고령의 경우 모두 대체로 행복하다는 Attribute 가 노출 가능
data %>%
group_by(sex ,age) %>%
filter(sex=='FEMALE' & age<20) # 20살 미만의 여성의 경우에도 특정짓기가 너무 쉽다. data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
#------------------------ 2번 data utility------------------------#
# 전체적인 데이터 분포비교(어느정도 같아보인다.)
compare(sds.default, ods, stat = "counts")
# 평균 비교(차이가 거의 없는듯하다.)
mean(ods[,'income'])
mean(sds[,'income'])
mean(ods[,'age'])
mean(sds[,'age'])
# covariance 구조 비교 (covariance 에서 약간 차이가 있어보인다.)
var(sds[,c('age','income')])
var(ods[,c('age','income')])
# age 와 income 구조 비교 (거의 같아보인다.)
plot(ods[,'age'],ods[,'income'],main='기존 데이터')
plot(sds[,'age'],sds[,'income'],main='Synthetic 데이터')
# age 와 결혼상태 비교
ods %>%
count(age,marital)
sds %>%
count(age,marital)
############################ 3번 #####################################
sds.default
# 새로운 방식 적합
sds.new = syn(ods,seed=2014131026,method = c( 'parametric'))
sds.new
compare(sds.new, ods, stat = "counts")
sds.new
# 새로운 방식 적합
sds.new = syn(ods,seed=2014131026,method = c( 'parametric'))
sds.new
compare(sds.new, ods, stat = "counts")
# install.packages("synthpop")
set.seed(2014131026)
#------------------------ data generating -------------------------------#
require(synthpop)
vars=c("sex", "age", "marital", "income", "ls")
SD2011_sub=SD2011[, vars]
ods=SD2011_sub[which(SD2011_sub$income>0),]
sds.default=syn(ods,seed=2014131026)
sds=sds.default$syn
sds
############################## 1번 ###########################################
#1.1 compute k-anonymity and l-diversity
library(dplyr)
data = add_count(sds,sex,age,name='k_anonymity') # sex 와 age 를 key variable 로 삼아서 k-anonymity 계산
data=data %>%
group_by(sex,age) %>% #sex 와 age 를 묶음
mutate(l_diversity = n_distinct(ls)) # sex 와 age 를 grouping 한 상태에서, l-diversity 계산
data
#1.2 sort syntheic data in order of sex, age, ls
data = data %>%
arrange(sex,age,ls)
data # factor 에서, 순서별로 되어있던 정렬
data_alphabet = data.frame(data)
data_alphabet$sex = as.character(data_alphabet$sex)
data_alphabet$ls = as.character(data_alphabet$ls)
data_alphabet = data_alphabet %>%
arrange(sex,age,ls)
#1.3 Report 첫 20개의 데이터 (알파벳순 정렬)
head(data_alphabet,20)
############################ 2번 #####################################
#-------------------2번 데이터 privacy-------------------------#
data %>%
arrange(l_diversity)
# 89 세 남자 고령의 경우 모두 대체로 행복하다는 Attribute 가 노출 가능
data %>%
group_by(sex ,age) %>%
filter(sex=='FEMALE' & age<20) # 20살 미만의 여성의 경우에도 특정짓기가 너무 쉽다.
data %>%
group_by(sex,age) %>%
summarise(l_diversity = n_distinct(ls)) %>%
arrange(l_diversity)# sex 와 age 를 grouping 한 상태에서, ls 의 가짓수 계산
#------------------------ 2번 data utility------------------------#
# 전체적인 데이터 분포비교(어느정도 같아보인다.)
compare(sds.default, ods, stat = "counts")
mean(ods[,'income'])
mean(sds[,'income'])
mean(ods[,'age'])
mean(sds[,'age'])
# covariance 구조 비교 (covariance 에서 약간 차이가 있어보인다.)
var(sds[,c('age','income')])
var(ods[,c('age','income')])
# age 와 income 구조 비교 (거의 같아보인다.)
plot(ods[,'age'],ods[,'income'],main='기존 데이터')
plot(sds[,'age'],sds[,'income'],main='Synthetic 데이터')
# age 와 결혼상태 비교
ods %>%
count(age,marital)
sds %>%
count(age,marital)
############################ 3번 #####################################
sds.default
# 새로운 방식 적합
sds.new = syn(ods,seed=2014131026,method = c( 'parametric'))
sds.new
compare(sds.new, ods, stat = "counts")
library(dplyr)
library(ggplot2)
# %>% 파이프 연산자
# 함수의 출력이 그 다음값으로 바로 들어가는것
# %>% 함수1 %>% 함수2(함수1의 값을 이용) %>%......
# function (dataframe,arg1,arg2)
# dataframe %>%
#   function(arg1,ar2) # 위와 이 표현은 같다.
id <- c(1,2,3,4,5,6)
class <- c(2,1,2,1,1,2)
english <- c(98,97,86,98,80,89)
science <- c(50,60,78,58,65,98)
data <- data.frame(id,class,english,science) ; data
# select : 데이터 프레임에서 내가 원하는 column 만 선택하겠다.
data %>% # 데이터가 slect 의 입력으로 들어감
select(class,english) # class, english 만 표출해라
library(rmarkdown)
library(knitr)
library(RJSONIO)
library(knitr)
library(dplyr)
library(ggplot2)
library(rmarkdown)
library(knitr)
```
library(dplyr)
library(ggplot2)
library(rmarkdown)
library(knitr)
id <- c(1,2,3,4,5,6)
class <- c(2,1,2,1,1,2)
english <- c(98,97,86,98,80,89)
science <- c(50,60,78,58,65,98)
data <- data.frame(id,class,english,science) ; data
```{r results='hide', message=FALSE, warning=FALSE}
library(dplyr)
library(ggplot2)
library(rmarkdown)
library(knitr)
```
getwd()
```{r}
id <- c(1,2,3,4,5,6)
class <- c(2,1,2,1,1,2)
english <- c(98,97,86,98,80,89)
science <- c(50,60,78,58,65,98)
data <- data.frame(id,class,english,science) ; data
```
# 1.기초지식
### 파이프 연산자 [%>%]
함수의 출력이 그 다음값으로 바로 들어가는것
%>% 함수1 %>% 함수2(함수1의 값을 이용) %>%.....
```{r results='hide', message=FALSE, warning=FALSE}
library(dplyr)
library(ggplot2)
library(rmarkdown)
library(knitr)
```
getwd()
```{r}
id <- c(1,2,3,4,5,6)
class <- c(2,1,2,1,1,2)
english <- c(98,97,86,98,80,89)
science <- c(50,60,78,58,65,98)
data <- data.frame(id,class,english,science) ; data
```
# 1.기초지식
### 파이프 연산자 [%>%]
함수의 출력이 그 다음값으로 바로 들어가는것
%>% 함수1 %>% 함수2(함수1의 값을 이용) %>%.....
mat1
z
Sys.setlocale("LC_ALL","English")
s
Sys.setlocale("LC_ALL","English")
s
ss
shit
# 데이터 파일 저장하기
write.csv(txt,
file = './example.csv',
row.names = FALSE # default 로 첫 col 에 row 의 index 가 추가로 들어간다. 이를 방지
)
sessionInfo()
Sys.setenv(LANG = "en")
capture.output(summary(lm),
file = './analysis2.txt')
# ls() : 현재 사용중인 변수의 목록을 보여준다.
ls()
# rm(x) : 사용중인 변수 x 를 지운다.
rm(x)
2 + 4
# jekyll 블로그 디렉토리 설정
base <- "C:/Users/goran/Desktop/Git_Hub/Blog_Git/hana-dool.github.io"
# Rmd 파일이 저장된 디렉토리 지정
rmds <- "C:/Users/goran/Desktop/Git_Hub/R/R"
setwd(base)
# 파일 이름 지정
filename <- "Anal_Logistic-regression.Rmd"
# 폴더 경로들 지정
figs.path <- "assets/images/" # 이미지가 들갈 폴더을 지정
posts.path <- "_posts/R/" # 포스트가 들어갈 폴더 지정
# Rmd -> md 변환
require(knitr)
render_jekyll(highlight = "pygments")
opts_knit$set(base.url="/")
file <- paste0(rmds, "/", filename)
### 파일 경로 설정
fig.path <- paste0(figs.path, sub(".Rmd$", "", basename(file)), "/")
opts_chunk$set(fig.path = fig.path)
### suppress messages
opts_chunk$set(cache = F, warning = F, message = F, cache.path = "_cache/", tidy = F)
### 파일 변환 및 경로 지정
out.file <- basename(knit(file))
file.rename(out.file, paste0(posts.path, out.file))
